<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:d="http://ns.adobe.com/fxg/2008/dt"
				minWidth="100" height="50"
				width="{txtGroup.width}"
				autoDrawBackground="false"
				click="itemrenderer1_clickHandler(event)"
				stateChangeComplete="stateChangeCompleteHandler(event)"
				creationComplete="init(event)"
				>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.SandboxMouseEvent;
			
			import spark.events.IndexChangeEvent;
			
			import th.co.tomato.themes.FlatTheme;
			private var chk:Boolean = false;
			protected function list1_changeHandler(event:IndexChangeEvent):void
			{
//				txt1.text =  lst1.selectedItem as String;
				pop.displayPopUp = false;
				pop.includeInLayout = false;
				chk = false;
			}
			
			protected function itemrenderer1_clickHandler(event:MouseEvent):void
			{
				trace('chk bf = ',chk);
				chk = !chk;
				if (currentState != 'selected'){
						currentState = 'selected';
						pop.displayPopUp = true;
						pop.includeInLayout = true;
				} else {
					if(chk){
						pop.displayPopUp = true;
						pop.includeInLayout = true;
					} else {
						pop.displayPopUp = false;
						pop.includeInLayout = false;
					}
				}
				trace('chk af = ',chk);
			}
			
			protected function init(event:FlexEvent):void
			{
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				systemManager.getSandboxRoot().addEventListener(SandboxMouseEvent.MOUSE_DOWN_SOMEWHERE, onMouseDown);
			}
			
			protected function onMouseDown(event:Event):void
			{				
				var idd:String = '';
				if(Object(event.target).hasOwnProperty('id')){
					idd = Object(event.target).id;
				}
				
				if(event.target == txtGroup || event.target == this || idd == "itemGroup" ||  idd == "thumb" ){
//					trace('onMouseDown =');
					
				} else {
//					trace('onMouseDown  !=',currentState);
					if(currentState != 'normal'){
						currentState='normal';
						chk = false;
						validateDisplayList();
//						trace('after change= ',currentState);
					}
				}
			}
			
			
			
			protected function stateChangeCompleteHandler(event:FlexEvent):void
			{
				if(currentState == "normal"){
					chk = false;
				}
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if(currentState == "normal"){
					chk = false;
				}
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<s:HGroup height="50" horizontalAlign="center" paddingLeft="10" paddingRight="10" id="txtGroup"
			  verticalAlign="middle"
			  horizontalCenter="0" verticalCenter="0">
	<s:RichText fontFamily="myiconfont" fontSize="16" tabStops="S0 S50" fontSize.normal="16"
				text="{data.image1}" color="#ffffff" />
	<s:RichText   fontSize="14" tabStops="S0 S50" id="txt1"
				text="{data.text1}" color="#ffffff" />
	</s:HGroup>
	
	<s:Rect x="0" width="100%"
			y="0" height="50" alpha.hovered="0.3"
			alpha.normal="0"
			alpha.selected="0.5">
		<s:fill>
			<s:SolidColor color.normal="{FlatTheme.upColor}" color.hovered="{FlatTheme.overColor}" color.selected="{FlatTheme.selectColor}" />
		</s:fill>
	</s:Rect>
	<s:PopUpAnchor includeIn="selected" top="50" left="0" width="200" height="200" id="pop"
				   displayPopUp.selected="true" displayPopUp.normal="false" displayPopUp.hovered="false"
				   >
	<s:Group top="0" left="0" width="200" height="200">
		<s:Rect includeIn="selected" x="-1" y="0" width="200" height="200">
			<s:stroke>
				<s:SolidColorStroke caps="none"  color="{FlatTheme.upColor}" joints="miter" miterLimit="4" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
		<s:List includeIn="selected" x="0" y="0" width="199" height="199" 
				skinClass="th.co.tomato.themes.component.topmenu.topDetailMenuDataListSkin"
				change="list1_changeHandler(event)" id="lst1">
			<s:ArrayCollection>
			<fx:Object image1="B"
					   text1="AAAAAA1" hit="1" A="Main" 
					   children ="[]"
					   />
			<fx:Object image1="A"
					   text1="AAAAAA2" hit="2" A="A" 
					   children ="[]"
					   />
			<fx:Object image1="C"
					   text1="AAAAAAAA3" hit="3" A="A"  
					   children ="[]"
					   />
			<fx:Object image1="D"
					   text1="AAAAAA4" hit="4" A="A"  
					   children ="[]"
					   />
			<fx:Object image1="E"
					   text1="AAAAAAA5" hit="5" A="A" 
					   children ="[]"
					   />
			</s:ArrayCollection>
		</s:List>
	</s:Group>
	</s:PopUpAnchor>
</s:ItemRenderer>
