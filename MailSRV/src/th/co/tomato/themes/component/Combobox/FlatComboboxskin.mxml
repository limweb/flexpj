<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		height="29" width="147"
		alpha.disabled=".5"> 
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ComboBox")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		<![CDATA[       
			import th.co.tomato.themes.FlatTheme;
			private var paddingChanged:Boolean;
			private var cornerRadiusChanged:Boolean;
			private var cornerRadius:Number = 0;            
			
			
			/**
			 *  @private
			 */
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (paddingChanged && textInput)
				{
					// Push padding styles into the textDisplay
					var padding:Number;
					
					padding = getStyle("paddingLeft");
					if (textInput.getStyle("paddingLeft") != padding)
						textInput.setStyle("paddingLeft", padding);
					
					padding = getStyle("paddingTop");
					if (textInput.getStyle("paddingTop") != padding)
						textInput.setStyle("paddingTop", padding);
					
					padding = getStyle("paddingRight");
					if (textInput.getStyle("paddingRight") != padding)
						textInput.setStyle("paddingRight", padding);
					
					padding = getStyle("paddingBottom");
					if (textInput.getStyle("paddingBottom") != padding)
						textInput.setStyle("paddingBottom", padding);
					paddingChanged = false;
				}
				
				if (cornerRadiusChanged)
				{
					cornerRadiusChanged = false;
					
					/* var cr:Number = getStyle("cornerRadius");
					
					if (openButton)
					openButton.setStyle("cornerRadius", cr);
					if (textInput)
					textInput.setStyle("cornerRadius", cr); */
				}
			}
			
			/**
			 *  @private
			 */
			override public function styleChanged(styleProp:String):void
			{
				super.styleChanged(styleProp);
				
				if (!styleProp || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
					invalidateProperties();
				}
				if (!styleProp || styleProp == "cornerRadius")
				{
					cornerRadiusChanged = true;
					invalidateProperties();
				}                
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == false)
				{
					if (border)
						border.visible = false;
					if (scroller)
						scroller.minViewportInset = 0;
				}
				else
				{
					if (border)
						border.visible = true;
					if (scroller)
						scroller.minViewportInset = 1;
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
		<s:State name="disabled" />
	</s:states>
		
		<s:Rect id="rect1" width="100%" height ="29" height.open="165" >
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
		
		<s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
					   left="0" right="0" top="29" bottom="0" itemDestructionPolicy="auto"
					   popUpPosition="topLeft" popUpWidthMatchesAnchorWidth="true"
					   x="0" y="0"
					   >
			<s:Group id="dropDown" maxHeight="134" minHeight="22" >
				<s:Rect includeIn="open" top="0" left="0" right="0" bottom="0" >
					<s:fill>
						<s:SolidColor color="0xFFFFFF" />
					</s:fill>
				</s:Rect>
				<s:Scroller id="scroller" left="0" top="0" right="0" bottom="0" hasFocusableChildren="false" minViewportInset="1"
							skinClass="th.co.tomato.themes.component.SlimScroller.FlexScrollerSkin"
							>
					<s:DataGroup id="dataGroup" itemRenderer="th.co.tomato.themes.component.Combobox.FlatComboboxDataListSkinRepeatedItemSkin">
						<s:layout>
							<s:VerticalLayout gap="0" horizontalAlign="contentJustify"/>
						</s:layout>
					</s:DataGroup> 
				</s:Scroller>
				<s:Rect x="0" width="147" height="184"
						top.normal="1" height.normal="29"
						y.open="-30" height.open="165">
					<s:stroke>
						<s:SolidColorStroke caps="none" color="{FlatTheme.upColor}" joints="miter" miterLimit="4"
											weight="2"/>
					</s:stroke>
				</s:Rect>
			</s:Group>
		</s:PopUpAnchor>
		
		<!--- The anchor button used by the ComboBox. The default skin is ComboBoxButtonSkin. -->
		<s:Button id="openButton" right="0" top="8" width="20" focusEnabled="false"
				  skinClass="th.co.tomato.themes.component.Combobox.FlexComboboxButtonSkin"  rotation.open="180" rotation.normal="0"
				  />  
		<!--- The text input area of the ComboBox. -->
		<s:TextInput id="textInput"
					 left="0" right="19" top="0" height="29" 
					 skinClass="th.co.tomato.themes.component.Combobox.FlatComboboxTextInputSkin"/> 
		<s:Rect id="border" top="0" left="0" right="0" bottom="0" includeIn="normal">
			<s:stroke>
				<s:SolidColorStroke caps="none" color="{FlatTheme.upColor}" joints="miter" miterLimit="4" 	weight="2"/>
			</s:stroke>
		</s:Rect>
</s:Skin>

